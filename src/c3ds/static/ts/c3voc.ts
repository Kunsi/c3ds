/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type DurationHhMm = string;
export type RoomName = string;
export type Person = {
  name?: string;
  /**
   * Person UUID generated from email address via uuid5(NS_URL, 'acct:user@domain.tld') or random uuid4() if email not available
   */
  guid?: string;
  /**
   * deprecated integer person id, use guid with uuid5(NS_URL, 'acct:user@domain.tld') instead
   */
  id?: number;
  [k: string]: unknown;
} & Person1;
export type Person1 = FrabPerson | PretalxPerson;

export interface ScheduleJson {
  schedule: Schedule;
  $schema?: string;
  generator?: {
    name?: string;
    version?: string;
    url?: string;
    [k: string]: unknown;
  };
}
export interface Schedule {
  version: string;
  /**
   * base for relative media URIs in this document
   */
  base_url?: string;
  conference: Conference;
  rooms?: never;
  [k: string]: unknown;
}
export interface Conference {
  acronym: string;
  title: string;
  description?: string;
  start: string;
  end: string;
  daysCount: number;
  timeslot_duration: string;
  time_zone_name?: string;
  logo?: string;
  colors?: {
    primary?: string;
    background?: string;
    [k: string]: unknown;
  };
  keywords?: string[];
  /**
   * URL to the conference schedule or public website
   */
  url?: string;
  tracks?: {
    name?: string;
    color?: string;
    [k: string]: unknown;
  }[];
  rooms?: Room[];
  meta?: {
    [k: string]: unknown;
  };
  days: Day[];
}
export interface Room {
  name: string;
  guid?: string;
  description?: string | null;
  capacity?: number | null;
}
export interface Day {
  index: number;
  date: string;
  day_start: string;
  day_end: string;
  rooms: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: Event[];
  };
}
export interface Event {
  id: number;
  guid: string;
  /**
   * absolute URL, or relative to base_url
   */
  logo?: string | null;
  date: string;
  start: string;
  duration: DurationHhMm;
  room: RoomName;
  slug: string;
  url: string;
  title: string;
  subtitle: string | null;
  track: string | null;
  type: string;
  language: string;
  abstract: string | null;
  description?: string | null;
  recording_license?: string;
  do_not_record?: boolean | null;
  do_not_stream?: string | null;
  persons: Person[];
  links: unknown[];
  feedback_url?: string;
  attachments?: unknown[];
  answers?: unknown[];
}
export interface FrabPerson {
  id: number;
  /**
   * @deprecated
   */
  public_name: string;
  [k: string]: unknown;
}
export interface PretalxPerson {
  code?: string;
  name: string;
  /**
   * absolute URL, or relative to base_url
   */
  avatar?: string | null;
  biography?: string;
  answers?: unknown[];
  [k: string]: unknown;
}
